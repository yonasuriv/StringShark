#!/usr/bin/env python3
import os
import re
import sys
import platform
from colorama import Fore, Style

# Function to colorize matched keyword for terminal output (Linux and macOS support colors)
def colorize_keyword(line, keyword):
    if platform.system() in ['Linux', 'Darwin']:
        return re.sub(f"({keyword})", r"\033[91m\1\033[0m", line)
    else:  # Windows
        return line  # Colorizing in the terminal doesn't work by default on Windows

def colorize_replacement(replacement):
    if platform.system() in ['Linux', 'Darwin']:
        return f"\033[92m{replacement}\033[0m"
    else:  # Windows (if colors aren't supported)
        return replacement

def search_and_replace(keyword, match_mode, search_path, replace=None):
    matches_found = False  # Variable to track if any matches are found

    # Traverse only the current directory (no recursion)
    for file in os.listdir(search_path):
        file_path = os.path.join(search_path, file)
        if os.path.isfile(file_path):  # Ensure we're working with a file, not a directory
            try:
                # Open file with proper encoding
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    lines = f.readlines()
            except:
                continue  # Ignore files that can't be opened

            found = False
            new_lines = []
            for line_number, line in enumerate(lines, 1):
                match = None
                # Handle different matching modes
                if match_mode in ['-md', '']:  # Match default (no case sensitivity, partial)
                    match = re.search(re.escape(keyword), line, re.IGNORECASE)
                elif match_mode == '-mc':  # Match case-sensitive
                    match = re.search(re.escape(keyword), line)
                elif match_mode == '-mw':  # Match whole word (case-insensitive)
                    match = re.search(rf'\b{re.escape(keyword)}\b', line, re.IGNORECASE)
                elif match_mode == '-me':  # Match both case-sensitive and whole word
                    match = re.search(rf'\b{re.escape(keyword)}\b', line)

                if match:
                    matches_found = True  # At least one match was found
                    if replace:
                        # Replace keyword with the new value (case-insensitive)
                        new_line = re.sub(re.escape(keyword), replace, line, flags=re.IGNORECASE)
                        if new_line != line:
                            print(f"\nðŸ¦ˆ Keyword \"{colorize_keyword(line.strip(), match.group())}\" replaced with \"{colorize_replacement(replace)}\" in {file_path}")
                        line = new_line
                    else:
                        print(f"\nðŸ¦ˆ Keyword found in {file_path} on line {line_number}:")
                        # Highlight the matched keyword in the output
                        print(colorize_keyword(line.strip(), match.group()))
                    found = True
                new_lines.append(line)

            if found and replace:
                # Write changes back to the file
                try:
                    with open(file_path, 'w', encoding='utf-8', errors='ignore') as f:
                        f.writelines(new_lines)
                except:
                    continue  # Ignore files that can't be written to

    # If no matches were found, print a colored message
    if not matches_found:
        print(f"\n ðŸ”´ " + "No matches found for the keyword:" + f"{Fore.GREEN}", keyword + f"{Style.RESET_ALL}")

def print_help():
    help_message = """
Usage: sshark [-md|-mc|-mw|-me] "keyword" [-r "replace_value"] [-p "path"]

Description:
    A powerful search and replace tool for scanning through files in a directory.
    It allows you to search for keywords in files with different match modes and
    optionally replace them. It also supports searching through specific paths.

Arguments:
    -md          Match mode: default (case-insensitive, partial match). 
                 Example: Finds keywords in any case (e.g. "hello" matches "Hello", "HELLO").
    -mc          Match mode: case-sensitive (exact match). 
                 Example: Only matches "hello" if the keyword is exactly "hello".
    -mw          Match mode: whole word (case-insensitive).
                 Example: Matches "hello" as a whole word (e.g. "hello" matches "hello", but not "hellos").
    -me          Match mode: case-sensitive and whole word.
                 Example: Finds only the exact match of "hello" as a whole word.

    -r "replace_value"    Replace the found keyword with the given "replace_value".
                          Example: Use this to replace all instances of the keyword with a new string.

    -p "path"             The directory path where the search will be performed. 
                          Defaults to the current directory if not provided.

Examples:
    sshark -md "foo"                 	# Search for "foo" (case-insensitive) in the current directory
    sshark -mc "foo"                 	# Search for "foo" (case-sensitive) in the current directory
    sshark -mw "foo" -r "bar"        	# Replace "foo" with "bar" in the current directory (whole word, case-insensitive)
    sshark -me "foo" -p "/path/to/dir"  # Search for "foo" exactly (case-sensitive and whole word) in a specific directory
"""
    print(help_message)

def main():
    # Check if enough arguments are provided
    if len(sys.argv) < 2:
        print_help()
        sys.exit(1)

    # Default search path is the current directory
    search_path = os.getcwd()

    # Extract the match mode and keyword
    if sys.argv[1] in ['-md', '-mc', '-mw', '-me']:
        match_mode = sys.argv[1]
        keyword = sys.argv[2]
    else:
        match_mode = '-md'  # Default match mode if no argument is provided
        keyword = sys.argv[1]

    # Check if the replace option is given
    replace = None
    if "-r" in sys.argv:
        replace_index = sys.argv.index("-r")
        replace = sys.argv[replace_index + 1]

    # Check if the path argument is given
    if "-p" in sys.argv:
        path_index = sys.argv.index("-p")
        search_path = sys.argv[path_index + 1]
    
    # Call the search and replace function
    search_and_replace(keyword, match_mode, search_path, replace)

if __name__ == "__main__":
    main()
